package game;

import java.awt.Color;
import java.awt.Graphics;
import java.util.ArrayList;
import java.util.Random;

public class RandomPolygons {
    private static ArrayList<Polygon> polygons;
    private int numberOfPolygons, polygonSize, topBorderHeight;
    private Random random;
    private Border border;
    private Squares squares;
    private Triangles triangles;
    
    public RandomPolygons(int numberOfPolygons, int polygonSize) {
        this.numberOfPolygons = numberOfPolygons;
        this.polygonSize = polygonSize;
        this.topBorderHeight = 30;
        
        polygons = new ArrayList<>();
        
        random = new Random();
        
        border = new Border();
        squares = new Squares();
        triangles = new Triangles();
    }
    
    private boolean isOverlapping(int squareX, int squareY, int pointX, int pointY) {
        int buffer = 50; // Buffer in pixels
        int expandedX1 = pointX - buffer;
        int expandedY1 = pointY - buffer;
        int expandedX2 = pointX + buffer;
        int expandedY2 = pointY + buffer;
        return !(squareX + polygonSize < expandedX1 || squareX > expandedX2 || squareY + polygonSize < expandedY1 || squareY > expandedY2);
    }
    
    private class Border {
    	public Border() {
	    	Point[] topBorder = {
	        		new Point(0,20),
	        		new Point(800,20),
	        		new Point(800,30),
	        		new Point(0,30)
	        };
	   
	        Point[] bottomBorder = {
	        		new Point(0,562),
	        		new Point(800,562),
	        		new Point(800,572),
	        		new Point(0,572)
	        };
	        
	        Point[] leftBorder = {
	        		new Point(0,20),
	        		new Point(10,20),
	        		new Point(10,562),
	        		new Point(0,562)
	        };
	        
	        Point[] rightBorder = {
	        		new Point(790,20),
	        		new Point(800,20),
	        		new Point(800,562),
	        		new Point(790,562)
	        };
	        
	        polygons.add(new Polygon(topBorder, new Point(200, 25), 0));
	        polygons.add(new Polygon(bottomBorder, new Point(200, 567), 0));
	        polygons.add(new Polygon(leftBorder, new Point(0, 160), 0));
	        polygons.add(new Polygon(rightBorder, new Point(795, 160), 0));
        }
    }
    
    private class Squares {
    	public Squares() {
			for (int i = 0; i < numberOfPolygons; i++) {
				while (true) {
					int x = random.nextInt(800 - polygonSize);
					int y = random.nextInt(600 - polygonSize - topBorderHeight) + topBorderHeight;
					if (!isOverlapping(x, y, 185, 285) && !isOverlapping(x, y, 585, 285)) {
						Point[] squareShape = {
								new Point(x, y),
								new Point(x + polygonSize, y),
								new Point(x + polygonSize, y + polygonSize),
								new Point(x, y + polygonSize)
								};
						polygons.add(new Polygon(squareShape, new Point(x, y), 0));
						break;
					}
				}
			}
    	}
    }
    
    private class Triangles {
    	public Triangles() {
          for (int i = 0; i < numberOfPolygons; i++) {
              while (true) {
                  int x = random.nextInt(800 - polygonSize);
                  int y = random.nextInt(600 - polygonSize - topBorderHeight) + topBorderHeight;
                  if (!isOverlapping(x, y, 185, 285) && !isOverlapping(x, y, 585, 285)) {
                      Point[] triangleShape = {
                          new Point(x, y),
                          new Point(x + polygonSize / 2, y + polygonSize),
                          new Point(x + polygonSize, y)
                      };
                      polygons.add(new Polygon(triangleShape, new Point(x, y), 0));
                      break;
                  }
              }
          }
    	}
    }    	

    public static ArrayList<Polygon> getPolygons() {
			return polygons;
    }
    
	public Triangles getTriangles() {
		return triangles;
	}

	public Border getBorder() {
		return border;
	}

	public Squares getSquares() {
		return squares;
	}

    public void paint(Graphics brush) {
        for (Polygon polygon : polygons) {
            Point[] points = polygon.getPoints();
            int[] xPoints = new int[points.length];
            int[] yPoints = new int[points.length];
            for (int i = 0; i < points.length; i++) {
                xPoints[i] = (int) points[i].x;
                yPoints[i] = (int) points[i].y;
            }
            brush.fillPolygon(xPoints, yPoints, points.length);
        }
    }
}
