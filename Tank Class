package game;

import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

public class Tank extends Polygon implements KeyListener{
	private int[] x,y;
	private double increment;
	private int degrees;
	private boolean forwards, backwards, left, right;

	private ArrayList<Shooting> shooting; // Broski this is for shooitng
	
	public Tank(Point[] inShape, Point inPosition, double inRotation) {
		super(inShape, inPosition, inRotation);
		
		this.x = new int[this.getPoints().length];
		this.y = new int[this.getPoints().length];
		
		this.increment = 2;
		this.degrees = 2;
		
		this.forwards = false;
		this.backwards = false;
		this.left = false;
		this.right = false;

		shooting = new ArrayList<>();shooting = new ArrayList<>(); // for shooitng
	}
	
	public void paint(Graphics brush) {		
		
		for(int i = 0; i < this.getPoints().length; i++) {
			this.x[i] = (int) this.getPoints()[i].getX();
			this.y[i] = (int) this.getPoints()[i].getY();
		}

		for (int i = 0; i < shooting.size(); i++) {
		    Shooting projectile = shooting.get(i);
		    projectile.paint(brush);
		} // for shooting
		
		brush.drawPolygon(this.x, this.y, 12);
	}
	
	public void move() {
		if(this.left && this.forwards) {
			this.rotate(-this.degrees);
			super.position.setX(super.position.getX() 
					+ Math.cos(Math.toRadians(rotation)) * increment);
			super.position.setY(super.position.getY() 
					+ Math.sin(Math.toRadians(rotation)) * increment);
			
		} else if(this.right && this.forwards) {
			this.rotate(this.degrees);
			super.position.setX(super.position.getX() 
					+ Math.cos(Math.toRadians(rotation)) * increment);
			super.position.setY(super.position.getY() 
					+ Math.sin(Math.toRadians(rotation)) * increment);
			
		} else if(this.left && this.backwards) {
			this.rotate(-this.degrees);
			super.position.setX(super.position.getX() 
					- Math.cos(Math.toRadians(rotation)) * increment);
			super.position.setY(super.position.getY() 
					- Math.sin(Math.toRadians(rotation)) * increment);
			
		} else if(this.right && this.backwards) {
			this.rotate(this.degrees);
			super.position.setX(super.position.getX() 
					- Math.cos(Math.toRadians(rotation)) * increment);
			super.position.setY(super.position.getY() 
					- Math.sin(Math.toRadians(rotation)) * increment);
		
		} else if(this.left) {
			this.rotate(-this.degrees);
		
		} else if(this.right) {
			this.rotate(this.degrees);	
			
		} else if(this.forwards) {
			super.position.setX(super.position.getX() 
					+ Math.cos(Math.toRadians(rotation)) * increment);
			super.position.setY(super.position.getY() 
					+ Math.sin(Math.toRadians(rotation)) * increment);
			
		} else if(this.backwards) {
			super.position.setX(super.position.getX() 
					- Math.cos(Math.toRadians(rotation)) * increment);
			super.position.setY(super.position.getY() 
					- Math.sin(Math.toRadians(rotation)) * increment);
		}

		ArrayList<Shooting> remove = new ArrayList<>();
		for (int i = 0; i < shooting.size(); i++) {
		    Shooting projectile = shooting.get(i);
		    projectile.move();
		    if (projectile.getPosition().getX() < 0 || projectile.getPosition().getX() > 800 ||
		        projectile.getPosition().getY() < 0 || projectile.getPosition().getY() > 600) {
		        remove.add(projectile);
		    }
		}
		shooting.removeAll(remove); // 95 to this is for shooting
	}

	@Override
	public void keyPressed(KeyEvent e) {
		if(e.getKeyCode() == 37) {
			this.left = true;
		} else if(e.getKeyCode() == 38) {
			this.forwards = true;
		} else if(e.getKeyCode() == 39) {
			this.right = true;
		} else if(e.getKeyCode() == 40) {
			this.backwards = true;
		} else if (e.getKeyCode() == KeyEvent.VK_B) { //shooitng
			shoot();
		}		
	}

	@Override
	public void keyReleased(KeyEvent e) {
		if(e.getKeyCode() == 37) {
			this.left = false;
		} else if(e.getKeyCode() == 38) {
			this.forwards = false;
		} else if(e.getKeyCode() == 39) {
			this.right = false;
		} else if(e.getKeyCode() == 40) {
			this.backwards = false;
		}
	}	

	private void shoot() {
	    Shooting newProjectile = new Shooting(new Point(super.position.getX(), super.position.getY()), super.rotation, 5);
	    shooting.add(newProjectile);
	} // shooting
	
	@Override
	public void keyTyped(KeyEvent e) {}
}
