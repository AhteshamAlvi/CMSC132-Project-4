package game;

import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

public class Tank extends Polygon implements KeyListener{
	int[] x,y;
	double increment, rotation, rotator;
	Point[] shape;
	boolean forwards, backwards, left, right;
	
	public Tank(Point[] inShape, Point inPosition, double inRotation) {
		super(inShape, inPosition, inRotation);
		
		this.x = new int[this.getPoints().length];
		this.y = new int[this.getPoints().length];
		this.shape = inShape;
		this.rotation = inRotation;
		
		this.increment = 5;
		this.rotator = 1;
		
		this.forwards = false;
		this.backwards = false;
		this.left = false;
		this.right = false;
	}
	
	public void paint(Graphics brush) {		
		
		for(int i = 0; i < this.getPoints().length; i++) {
			this.x[i] = (int) this.getPoints()[i].getX();
			this.y[i] = (int) this.getPoints()[i].getY();
		}
		
		brush.drawPolygon(this.x, this.y, 4);
	}
	
	public void move() {
		if(this.left) {
			this.rotation += rotator;
			for(int i = 0; i < this.getPoints().length; i++) {
				this.shape[i].setX(this.shape[i].getX() + increment);
				this.shape[i].setY(this.shape[i].getY() - increment);
			}
			
		} else if(this.right) {
			for(int i = 0; i < this.getPoints().length; i++) {
				this.shape[i].setX(this.shape[i].getX() - increment);
				this.shape[i].setY(this.shape[i].getY() + increment);
			}			
			
		} else if(this.forwards) {
			for(int i = 0; i < this.getPoints().length; i++) {
				this.shape[i].setX(this.shape[i].getX() - increment);
				this.shape[i].setY(this.shape[i].getY() - increment);
			}
			
		} else if(this.backwards) {
			for(int i = 0; i < this.getPoints().length; i++) {
				this.shape[i].setX(this.shape[i].getX() + increment);
				this.shape[i].setY(this.shape[i].getY() + increment);
			}		
		}
	}

	@Override
	public void keyPressed(KeyEvent e) {
		if(e.getKeyCode() == 37) {
			this.left = true;
		} else if(e.getKeyCode() == 38) {
			this.forwards = true;
		} else if(e.getKeyCode() == 39) {
			this.right = true;
		} else if(e.getKeyCode() == 40) {
			this.backwards = true;
		}		
	}

	@Override
	public void keyReleased(KeyEvent e) {
		if(e.getKeyCode() == 37) {
			this.left = false;
		} else if(e.getKeyCode() == 38) {
			this.forwards = false;
		} else if(e.getKeyCode() == 39) {
			this.right = false;
		} else if(e.getKeyCode() == 40) {
			this.backwards = false;
		}
	}	
	
	@Override
	public void keyTyped(KeyEvent e) {}
}
