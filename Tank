package game;
//Omar and Ahtsham
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;

// this is a class that is for the tank. It makes the tank shoot and move

public class Tank extends Polygon implements KeyListener{
	private int[] x,y; // arrays to hold x and y cooridnates of the tank shape
	private double increment, originalRotation, obs; // increments movement and rotation
	private int degrees, keyL, keyF, keyR, keyB, keyS; // key for rotations
	private boolean forwards, backwards, left, right;
	private ArrayList<Canon> canon, remove;
	private Canon projectile;
	
	
	// initializes the tank and everyhting it has
	// also sets up the movmenet and rotation
	// sets up the key controls in this class
	public Tank(Point[] inShape, Point inPosition, double inRotation, 
			int keyL, int keyF, int keyR, int keyB, int keyS) {
		super(inShape, inPosition, inRotation);
		
		this.x = new int[this.getPoints().length];
		this.y = new int[this.getPoints().length];
		
		this.increment = 2;
		this.degrees = 2;
		this.obs = .05;
		this.originalRotation = inRotation;
		
		this.keyL = keyL;
		this.keyF = keyF;
		this.keyR = keyR; 
		this.keyB = keyB; 
		this.keyS = keyS;
		
		this.forwards = false;
		this.backwards = false;
		this.left = false;
		this.right = false;

		this.canon = new ArrayList<>(); 
		this.remove = new ArrayList<>();

	}
	
	  // Draws the tank and its projectiles on the screen
	public void paint(Graphics brush) {		
		
		for(int i = 0; i < this.getPoints().length; i++) {
			this.x[i] = (int) this.getPoints()[i].getX();
			this.y[i] = (int) this.getPoints()[i].getY();
		}
		// Draw each projectile in the canon list
		for (int i = 0; i < canon.size(); i++) {
		    Canon projectile = canon.get(i);
		    projectile.paint(brush);
		} 
		// draws the tank as a polygon
		brush.drawPolygon(this.x, this.y, 12);
	}
	
	 // Updates the tank's position and handles shooting
	public void move() {
		// Check movement flags and adjust tank's position and rotation accordingly
		if(this.left && this.forwards 
				&& (this.tankObstacleCollision(RandomPolygons.getPolygons())
				|| obstacleTankCollision(this,RandomPolygons.getPolygons()))) {
			this.rotate(-this.degrees);
			super.position.setX(super.position.getX() 
					+ Math.cos(Math.toRadians(rotation)) * increment * obs);
			super.position.setY(super.position.getY() 
					+ Math.sin(Math.toRadians(rotation)) * increment * obs);
			
		} else if(this.right && this.forwards 
				&& (this.tankObstacleCollision(RandomPolygons.getPolygons())
				|| obstacleTankCollision(this,RandomPolygons.getPolygons()))) {
			this.rotate(this.degrees);
			super.position.setX(super.position.getX() 
					+ Math.cos(Math.toRadians(rotation)) * increment * obs);
			super.position.setY(super.position.getY()
					+ Math.sin(Math.toRadians(rotation)) * increment * obs);
		
		} else if(this.left && this.backwards 
				&& (this.tankObstacleCollision(RandomPolygons.getPolygons())
				|| obstacleTankCollision(this,RandomPolygons.getPolygons()))) {
			this.rotate(-this.degrees);
			super.position.setX(super.position.getX() 
					- Math.cos(Math.toRadians(rotation)) * increment * obs);
			super.position.setY(super.position.getY() 
					- Math.sin(Math.toRadians(rotation)) * increment * obs);

		} else if(this.right && this.backwards 
				&& (this.tankObstacleCollision(RandomPolygons.getPolygons())
				|| obstacleTankCollision(this,RandomPolygons.getPolygons()))) {
			this.rotate(this.degrees);
			super.position.setX(super.position.getX() 
					- Math.cos(Math.toRadians(rotation)) * increment * obs);
			super.position.setY(super.position.getY() 
					- Math.sin(Math.toRadians(rotation)) * increment * obs);
		
		} else if(this.forwards
				&& (this.tankObstacleCollision(RandomPolygons.getPolygons())
				|| obstacleTankCollision(this,RandomPolygons.getPolygons()))) {
			super.position.setX(super.position.getX() 
					+ Math.cos(Math.toRadians(rotation)) * increment * obs);
			super.position.setY(super.position.getY() 
					+ Math.sin(Math.toRadians(rotation)) * increment * obs);
			
		} else if(this.backwards
				&& (this.tankObstacleCollision(RandomPolygons.getPolygons())
				|| obstacleTankCollision(this,RandomPolygons.getPolygons()))) {
			super.position.setX(super.position.getX() 
					- Math.cos(Math.toRadians(rotation)) * increment * obs);
			super.position.setY(super.position.getY() 
					- Math.sin(Math.toRadians(rotation)) * increment * obs);
			
		} else if(this.left && this.forwards) {
			this.rotate(-this.degrees);
			super.position.setX(super.position.getX() 
					+ Math.cos(Math.toRadians(rotation)) * increment);
			super.position.setY(super.position.getY() 
					+ Math.sin(Math.toRadians(rotation)) * increment);
			
		} else if(this.right && this.forwards) {
			this.rotate(this.degrees);
			super.position.setX(super.position.getX() 
					+ Math.cos(Math.toRadians(rotation)) * increment);
			super.position.setY(super.position.getY() 
					+ Math.sin(Math.toRadians(rotation)) * increment);
			
		} else if(this.left && this.backwards) {
			this.rotate(-this.degrees);
			super.position.setX(super.position.getX() 
					- Math.cos(Math.toRadians(rotation)) * increment);
			super.position.setY(super.position.getY() 
					- Math.sin(Math.toRadians(rotation)) * increment);
			
		} else if(this.right && this.backwards) {
			this.rotate(this.degrees);
			super.position.setX(super.position.getX() 
					- Math.cos(Math.toRadians(rotation)) * increment);
			super.position.setY(super.position.getY() 
					- Math.sin(Math.toRadians(rotation)) * increment);
		
		} else if(this.left) {
			this.rotate(-this.degrees);
		
		} else if(this.right) {
			this.rotate(this.degrees);	
			
		} else if(this.forwards) {
			super.position.setX(super.position.getX() 
					+ Math.cos(Math.toRadians(rotation)) * increment);
			super.position.setY(super.position.getY() 
					+ Math.sin(Math.toRadians(rotation)) * increment);
			
		} else if(this.backwards) {
			super.position.setX(super.position.getX() 
					- Math.cos(Math.toRadians(rotation)) * increment);
			super.position.setY(super.position.getY() 
					- Math.sin(Math.toRadians(rotation)) * increment);
		}
		
		// Move projectiles and remove them if they go out of bounds
		for (int i = 0; i < canon.size(); i++) {
		    this.projectile = canon.get(i);
		    this.projectile.move();
		    if (this.projectile.getPosition().getX() < 0 
		    		|| this.projectile.getPosition().getX() > 800 
		    		|| this.projectile.getPosition().getY() < 0 
		    		|| this.projectile.getPosition().getY() > 600) {
		    	
		        this.remove.add(projectile);
		    }
		}
		this.canon.removeAll(remove); 
	}
	
	// Creates a new projectile and adds it to the canon list
	private void shoot() {
		// Create new projectile at the tank's position and rotation
	    Canon newProjectile = new Canon(new Point(super.position.getX(), 
	    		super.position.getY()), super.rotation, 5);
	    canon.add(newProjectile);
	} 
	
	public ArrayList<Canon> getCanon() {
		return this.canon;
	}
	
	public ArrayList<Canon> getRemove() {
		return this.remove;
	}
	
	// Resets the tank's position and rotation to its original state before it died
	public void death(double x, double y) {
		super.position.setX(x);
		super.position.setY(y);
		super.rotation = originalRotation;
	}
	
	// Resets the tank's position and rotation to its original state before it's victory
	public void victory(double x, double y) {
		super.position.setX(x);
		super.position.setY(y);
		super.rotation = originalRotation;
	}

	// Handles key press events to control the tank's movement and shooting
	@Override
	public void keyPressed(KeyEvent e) {
		if(e.getKeyCode() == this.keyL) {
			this.left = true;
		} else if(e.getKeyCode() == this.keyF) {
			this.forwards = true;
		} else if(e.getKeyCode() == this.keyR) {
			this.right = true;
		} else if(e.getKeyCode() == this.keyB) {
			this.backwards = true;
		} else if (e.getKeyCode() == this.keyS) { 
			shoot();
		}
	}

	// Handles key releases events so the tank can stop moving
	@Override
	public void keyReleased(KeyEvent e) {
		if(e.getKeyCode() == this.keyL) {
			this.left = false;
		} else if(e.getKeyCode() == this.keyF) {
			this.forwards = false;
		} else if(e.getKeyCode() == this.keyR) {
			this.right = false;
		} else if(e.getKeyCode() == this.keyB) {
			this.backwards = false;
		}
	}	
	
	@Override
	public void keyTyped(KeyEvent e) {}
}
